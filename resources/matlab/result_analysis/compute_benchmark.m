function compute_benchmark(app)
% Extra fields for virtual reselt:
%     benchmark_archive: an archive map generated by merging final archive maps
%         of all results of all selected virtual results.
%     benchmark_best_fit: fitness of the best individual possible in the domain.

    num_virtual_results = length(app.VirtualResultsListBox.Value);
    wb = waitbar(double(0), ['Processing 1 / ', num2str(num_virtual_results)], 'Name', 'Processing benchmark for selected virtual results');

    % Get benchmark
    benchmark_archive = [];
    for i = 1 : num_virtual_results
        merged_virtual_archive = process_virtual_result(app, app.VirtualResultsListBox.Value(i));
        if isempty(benchmark_archive)
            benchmark_archive = merged_virtual_archive;
        else
            benchmark_archive = max(benchmark_archive, merged_virtual_archive);
        end
        waitbar(double(i + 1) / double(num_virtual_results), wb, sprintf("Processing %d / %d", i + 1, num_virtual_results));
    end
    benchmark_best_fit = max(benchmark_archive(:));

    % Save results
    waitbar(1, wb, 'Writting results');
    for i = 1 : num_virtual_results
        app.virtual_results{app.VirtualResultsListBox.Value(i)}.benchmark_best_fit = benchmark_best_fit;
        app.virtual_results{app.VirtualResultsListBox.Value(i)}.benchmark_archive = benchmark_archive;

        virtual_results = app.virtual_results;
        save(fullfile(app.result_group_path, 'virtual_results.mat'), 'virtual_results', '-v7.3');
    end

    close(wb);
end

function merged_archive = process_virtual_result(app, v_id)
    vr_ref = app.virtual_results{v_id};

    result = load_target_result(app, false, vr_ref.ids(1));
    griddim = [result.evo_params.griddim_0, result.evo_params.griddim_1];
    merged_archive = -Inf(griddim);
    for i = 1 : vr_ref.num_results
        result = load_target_result(app, false, vr_ref.ids(i));

        archive_map = -Inf(griddim);
        current_gen_archive = result.archive{end};
        x = current_gen_archive(:, 3) + 1; % remember matlab index starts from 1
        y = current_gen_archive(:, 4) + 1;
        fitness = current_gen_archive(:, 5);
        % sanitize the second dimension (here griddim(1) gives the size of first dimension)
        fitness(sub2ind(size(archive_map), 1:griddim(1), ones(1, griddim(1)))) = 0.1 * rand(griddim(1), 1) + fitness(sub2ind(size(archive_map), 1:griddim(1), 1 + ones(1, griddim(1))));

        archive_map(sub2ind(size(archive_map), x, y)) = fitness;
        merged_archive = max(merged_archive, archive_map);
    end
end
